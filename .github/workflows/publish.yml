name: "Publish"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  PACKAGES: "glob"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Install Zig (user local)
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          (matrix.target == 'aarch64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-gnu')
        run: |
          ZIG_VERSION=0.11.0
          ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-linux-x86_64-${ZIG_VERSION}.tar.xz"
          curl -LO "$ZIG_URL"
          tar -xf zig-linux-x86_64-${ZIG_VERSION}.tar.xz
          echo "$PWD/zig-linux-x86_64-${ZIG_VERSION}" >> $GITHUB_PATH
          echo "ZIG=$PWD/zig-linux-x86_64-${ZIG_VERSION}/zig" >> $GITHUB_ENV

      - name: Install aarch64 gnu cross toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl cross toolchain
        if: startsWith(matrix.os, 'ubuntu') && contains(matrix.target, 'linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install

      - name: Build napi binaries for all packages
        shell: bash
        run: |
          IFS=',' read -ra PACKAGE_LIST <<< "${{ env.PACKAGES }}"
          for package in "${PACKAGE_LIST[@]}"; do
            echo "Building package: $package"
            if [ -d "packages/$package" ]; then
              cd "packages/$package"
              pnpm build --target ${{ matrix.target }}
              cd ../..
            else
              echo "Package directory packages/$package not found, skipping"
            fi
          done

      - name: Upload napi binaries
        uses: actions/upload-artifact@v4
        with:
          name: napi-binaries-${{ matrix.target }}
          path: packages/*/*.node
          retention-days: 1

  prepublish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: napi-binaries-*
          path: artifacts/

      - name: Debug List downloaded artifacts
        run: find artifacts/ -name "*.node"

      - name: Organize binaries by package
        shell: bash
        run: |
          IFS=',' read -ra PACKAGE_LIST <<< "${{ env.PACKAGES }}"

          for artifact_dir in artifacts/napi-binaries-*; do
            if [ -d "$artifact_dir" ]; then
              target=$(basename "$artifact_dir" | sed 's/napi-binaries-//')
              echo "Processing target: $target"
              
              for package in "${PACKAGE_LIST[@]}"; do
                node_files=$(find "$artifact_dir" -name "${package}.*.node")
                for node_file in $node_files; do
                  if [ -f "$node_file" ]; then
                    filename=$(basename "$node_file")
                    arch=$(echo "$filename" | sed -E "s/^${package}\.([^.]+)\.node$/\1/")
                    
                    mkdir -p "packages/${package}/npm/${arch}"
                    cp "$node_file" "packages/${package}/npm/${arch}/${filename}"
                    echo "Moved: $node_file -> packages/${package}/${arch}/${filename}"
                  fi
                done
              done
            fi
          done

      - name: Check final output
        shell: bash
        run: |
          IFS=',' read -ra PACKAGE_LIST <<< "${{ env.PACKAGES }}"
          for package in "${PACKAGE_LIST[@]}"; do
            echo "=== Package: $package ==="
            ls -R packages/$package/ || echo "No files found for $package"
          done

      - name: Setup pnpm
        run: |
          npm install -g pnpm
          pnpm install

      - name: Generate platform-specific package.json and README.md
        shell: bash
        run: |
          IFS=',' read -ra PACKAGE_LIST <<< "${{ env.PACKAGES }}"
          for package in "${PACKAGE_LIST[@]}"; do
            if [ -d "packages/$package" ]; then
              cd "packages/$package"
              pnpm packages
              pnpm readme
              cd ../..
            fi
          done

      - name: Publish packages
        shell: bash
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        run: ../../scripts/publish.sh
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Check final output
      #   shell: bash
      #   run: |
      #     IFS=',' read -ra PACKAGE_LIST <<< "${{ env.PACKAGES }}"
      #     for package in "${PACKAGE_LIST[@]}"; do
      #       echo "=== Package: $package ==="
      #       ls -R packages/$package/ || echo "No files found for $package"
      #     done

      # - name: Upload npm directories as artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: npm-packages
      #     path: |
      #       packages/*/npm/
      #       packages/*/npm/**/*
      #     retention-days: 1
